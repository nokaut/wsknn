input_items: ''
input_sessions: ''
model:
  number_of_recommendations: 10
  # Sessions parameters
  number_of_neighbors: 100
  #   - random:          select random subset of sessions,
  #   - recent:          select most recent sessions,
  #   - common_items:    select sessions that contains any item from the recommended session,
  #   - weighted_events: select sessions based on the specific weights assigned to events.
  sampling_strategy: "weighted_events"
  sample_size: 1000
  # Required event (below) is an optional parameter. You may set it if you want to force algorithm to choose sessions
  # with, for example, "purchase", "add to cart" or 33 event types.
  required_sampling_event: null
  # Items parameters
  #    - linear:    basic linear weighting, distances between events in a sequence are equal and depended only on the
  #                 position of element in a sequence, always gives larger weights than the other methods,
  #    - log:       oldest elements starts from the larger weights than in the other methods. Then function returns very
  #                 similar weights, from approx. 20-90% of the sequence and the newest 90-100% of the events sharply
  #                 rose. It is good to mimic a short-term memory.
  #    - quadratic: the oldest elements are penalized much more than the middle-part and the newest elements in a
  #                 sequence. Function rises quicker than the log10 function but values are smaller than returned from
  #                 the linear function. Newest observation -> larger weight assigned to it.
  weighting_func: "linear"
  #   - linear:    simple linear function - up to 10 positions it is 1 - 0.1 * position normalized to [0:1], and 0 if
  #                the position is greater than 10.
  #   - inv:       inverted position of the item: 1/position within (0:1] limits.
  #   - log:       1 / log10(position + 1.7) normalized to the range [0:1].
  #   - quadratic: 1 / (position**2) - events closer to the end of sequence have larger weights than the past events,
  #                it is similar to linear function but weights are decreasing at larger and non-linear rate.
  ranking_strategy: "log"
  return_events_from_session: True
  recommend_any: False